let web3;
let contract;
let token;
let user;

async function initWeb3() {
  if (typeof window.ethereum !== 'undefined') {
    web3 = new Web3(window.ethereum);
    token = new web3.eth.Contract(erc20ABI, tokenAddress);
    contract = new web3.eth.Contract(stakingABI, contractAddress);

    ethereum.on('accountsChanged', () => window.location.reload());
    ethereum.on('chainChanged', () => window.location.reload());

    document.getElementById("connectWallet").addEventListener("click", connectWallet);
    document.getElementById("stakeButton").addEventListener("click", stakeTokens);
  } else {
    alert("‚ö†Ô∏è No Web3 provider found. Please use MetaMask, Bitget, or Trust Wallet.");
  }
}

window.addEventListener("load", initWeb3);

async function connectWallet() {
  try {
    const accounts = await window.ethereum.request({ method: "eth_requestAccounts" });
    user = accounts[0];

    const currentChainId = await ethereum.request({ method: "eth_chainId" });
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö chainId ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á, ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ 0x38 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Binance Smart Chain Mainnet
    if (parseInt(currentChainId, 16) !== chainId) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global chainId ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
      await ethereum.request({
        method: "wallet_switchEthereumChain",
        params: [{ chainId: "0x38" }], // ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô chainId ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö DApp ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
      });
    }

    document.getElementById("status").innerHTML = `‚úÖ Connected:<br>${user}`;
    loadStakes();
  } catch (err) {
    console.error("Connection failed:", err);
    document.getElementById("status").innerText = "‚ùå Connection failed.";
  }
}

async function stakeTokens() {
  const amount = document.getElementById("stakeAmount").value;
  const tier = document.getElementById("stakeTier").value; // Tier ‡∏Ñ‡∏ß‡∏£‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö lockPeriod ‡πÉ‡∏ô contract
  if (!amount || parseFloat(amount) <= 0) return alert("Enter amount to stake"); // ‡πÉ‡∏ä‡πâ parseFloat ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ tier ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (120, 180, 270)
  const validTiers = ['120', '180', '270'];
  if (!validTiers.includes(tier)) {
    return alert("Invalid tier selected. Please choose 120, 180, or 270.");
  }

  const decimals = await token.methods.decimals().call();
  // ‡πÅ‡∏õ‡∏•‡∏á amount ‡πÄ‡∏õ‡πá‡∏ô BigNumber ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ unit ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÄ‡∏ä‡πà‡∏ô 'ether' ‡∏ñ‡πâ‡∏≤ decimals ‡∏Ñ‡∏∑‡∏≠ 18)
  const stakeAmount = web3.utils.toWei(amount, 'ether'); // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ token ‡∏°‡∏µ 18 decimals ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô ether

  try {
    // ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∞ stake ‡πÑ‡∏î‡πâ
    await token.methods.approve(contractAddress, stakeAmount).send({ from: user });
    await contract.methods.stake(stakeAmount, tier).send({ from: user });

    alert("‚úÖ Staked successfully");
    loadStakes();
  } catch (error) {
    console.error("Staking failed:", error);
    alert("‚ùå Staking failed. Check console for details.");
  }
}

async function loadStakes() {
  const titleContainer = document.getElementById("stakesContainerTitle");
  const container = document.getElementById("stakesContainer");

  titleContainer.innerHTML = "<h2>Your Stakes</h2>";
  container.innerHTML = "";

  let index = 0;
  while (true) {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ stake.amount ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô BigNumber ‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö 0
      const stake = await contract.methods.stakes(user, index).call();
      if (web3.utils.toBN(stake.amount).isZero()) break; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ amount ‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

      const now = Math.floor(Date.now() / 1000); // Current timestamp in seconds
      const amount = web3.utils.fromWei(stake.amount, "ether"); // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ token ‡∏°‡∏µ 18 decimals

      // ‡πÅ‡∏õ‡∏•‡∏á startTime ‡πÅ‡∏•‡∏∞ lockPeriod ‡πÄ‡∏õ‡πá‡∏ô BigNumber ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
      const startTimeBN = web3.utils.toBN(stake.startTime);
      const lockPeriodBN = web3.utils.toBN(stake.lockPeriod); // lockPeriod ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏à‡∏≤‡∏Å contract

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì unlock time ‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      const unlockTimeInSeconds = startTimeBN.add(lockPeriodBN);

      // ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÄ‡∏õ‡πá‡∏ô Date object ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏π‡∏ì‡∏î‡πâ‡∏ß‡∏¢ 1000 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô milliseconds
      const start = new Date(startTimeBN.toNumber() * 1000).toLocaleDateString();
      const end = new Date(unlockTimeInSeconds.toNumber() * 1000).toLocaleDateString(); // ‡πÅ‡∏õ‡∏•‡∏á BigNumber ‡πÄ‡∏õ‡πá‡∏ô Number ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏π‡∏ì‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Date

      const card = document.createElement("div");
      card.className = "stake-item";
      card.innerHTML = `
        <p><strong>Amount:</strong> ${amount} KJC</p>
        <p><strong>Start:</strong> ${start}</p>
        <p><strong>Unlock:</strong> ${end}</p>
        <p><strong>Status:</strong> ${stake.claimed ? "‚úÖ Claimed" : "üîí Locked"}</p>
      `;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç claimable ‡πÅ‡∏•‡∏∞ canUnstake
      // ‡∏ñ‡πâ‡∏≤ lastClaimTime ‡πÄ‡∏õ‡πá‡∏ô BigNumber ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Number ‡∏Å‡πà‡∏≠‡∏ô
      const lastClaimTimeNum = web3.utils.toBN(stake.lastClaimTime).toNumber();
      const claimable = now - lastClaimTimeNum >= (15 * 86400); // 15 ‡∏ß‡∏±‡∏ô

      const canUnstake = now >= unlockTimeInSeconds.toNumber(); // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö unlockTimeInSeconds ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏ß‡πâ

      if (!stake.claimed && claimable) {
        const claimBtn = document.createElement("button");
        claimBtn.innerText = "Claim Reward";
        claimBtn.onclick = async () => {
          try {
            await contract.methods.claim(index).send({ from: user });
            alert("‚úÖ Claimed");
            loadStakes();
          } catch (error) {
            console.error("Claim failed:", error);
            alert("‚ùå Claim failed. Check console for details.");
          }
        };
        card.appendChild(claimBtn);
      }

      if (!stake.claimed && canUnstake) {
        const unstakeBtn = document.createElement("button");
        unstakeBtn.innerText = "Unstake";
        unstakeBtn.onclick = async () => {
          try {
            await contract.methods.unstake(index).send({ from: user });
            alert("‚úÖ Unstaked");
            loadStakes();
          } catch (error) {
            console.error("Unstake failed:", error);
            alert("‚ùå Unstake failed. Check console for details.");
          }
        };
        card.appendChild(unstakeBtn);
      }

      container.appendChild(card);
      index++;
    } catch (e) {
      console.error("Error loading stake at index", index, ":", e); // ‡πÄ‡∏û‡∏¥‡πà‡∏° console.error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á
      if (index === 0) container.innerText = "No stakes found.";
      break;
    }
  }
}
